(defwindow bar
    :monitor 0
    :geometry (geometry :x "0%"
                        :y "8px"
                        :width "99.5%"
                        :height "26px"
                        :anchor "top center"
                )
    :stacking "fg"
    :focusable false
    :exclusive true
    :namespace true
    (box
        :space-evenly false
        (left)
        (center)
        (right)
    )
)

(defwidget left []
    (box
      :width "100%"
      :hexpand true
      :space-evenly false
      :halign "start"
      (workspaces)
    )
)

(defwidget center []
    (box
      :width "100%"
      :hexpand true
      :space-evenly false
      :halign "start"
    )
)

(defwidget right []
    (box
      :width "100%"
      :hexpand true
      :space-evenly false
      :halign "end"
      (wifi)
      (cpus)
      (temps)
      (datatimes)
      (systrays)
    )
)




; 工作区
(deflisten workspaces :initial "[]" "bash ./scripts/get-workspaces")
(defwidget workspaces []
    (eventbox
        (box
            :space-evenly true
            (for workspace in workspaces
                (button
                    :onclick "hyprctl dispatch workspace ${workspace.id}"
                    :class "${workspace.state == 2 ? 'workspace-sel' : 'workspace-norm'} css-initial"
                    (label
                        :text "${workspace.id}"
                        :class "workspace-label"
                    )
                )
            )
        )
    )
)


(defwidget wifi []
    (eventbox
        :class "wifi"
        (box
            :class "wifi box"
            :orientation "v"
            :space-evenly false
            :valign "center"
            (box
                :class "wifi up"
                (label
                    :class "wifi up icon"
                    :text "↑"
                )
                (label
                    :class "wifi up value"
                    :text `${round(EWW_NET.wlo1.NET_UP /2 / 1024, 2) > 1024 ? "${round(EWW_NET.wlo1.NET_UP /2 / 1048576, 2)}" : "${round(EWW_NET.wlo1.NET_UP /2 / 1024, 2)}"} ${round(EWW_NET.wlo1.NET_UP / 2 / 1024,1) > 1024 ? "M/s" : "K/s"}`
                )
            )
            (box
                :class "wifi down"
                (label
                    :class "wifi down icon"
                    :text "↓"
                )
                (label
                    :class "wifi down value"
                    :text `${round(EWW_NET.wlo1.NET_DOWN /2 / 1024, 2) > 1024 ? "${round(EWW_NET.wlo1.NET_DOWN /2 / 1048576, 2)}" : "${round(EWW_NET.wlo1.NET_DOWN /2 / 1024, 2)}"} ${round(EWW_NET.wlo1.NET_DOWN / 2 / 1024,1) > 1024 ? "M/s" : "K/s"}`
                )
            )
        )
    )
)


(defpoll gpu_busy :interval "1s" :initial "0" "nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits")
(defpoll gpu_temp :interval "1s" :initial "0" "nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits")
(defwidget cpus []
    (box
        :class "cpu"
        :space-evenly false
        (label
            :class "cpu icon"
            :text ""
        )
        (box
            :orientation "v"
            :space-evenly false
            :width 60
            :valign "center"
            :halign "start"
            (label
                :class "cpu value"
                :xalign "0"
                :text "CPU: ${round(EWW_CPU.avg,0)} %"
                :wrap true
            )
            (label
                :class "cpu value"
                :xalign "0"
                :text "GPU: ${round(gpu_busy,0)} %"
                :wrap true
            )
        )
    )
)

(defwidget temps []
    (box
        :class "temp"
        :space-evenly false
        (label
            :class "temp icon"
            :text ""
        )
        (box
            :orientation "v"
            :space-evenly false
            :valign "center"
            :halign "start"
            (label
                :class "temp value"
                :text "CPU: ${round(EWW_TEMPS.ACPITZ_TEMP1,1)} °C"
                :wrap true
            )
            (label
                :class "temp value"
                :text "GPU: ${round(gpu_temp,1)} °C"
                :wrap true
            )
        )
    )
)

(defwidget datatimes []
    (eventbox
        :class "datatime"
        (box
            :class "datatime box"
            (label
                :class "datatime value"
                :text "${formattime(EWW_TIME, '%H')}"
            )
            (label
                :class "datatime icon"
                :text "󰇙"
            )
            (label
                :class "datatime value"
                :text "${formattime(EWW_TIME, '%M')}"
            )
            (label
                :class "datatime icon"
                :text "󰇙"
            )
            (label
                :class "datatime value"
                :text "${formattime(EWW_TIME, '%S')}"
            )
        )
    )
)

(defwidget systrays []
    (systray
      :class "systray"
      :packdirection "right"
    )
)

